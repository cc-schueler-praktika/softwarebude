from person import Person
from room import Room
from escape_room import EscapeRoom


class Map:

    def __init__(self):
        self.rooms = []
        self.init_rooms()
        self.current_room = self.rooms[0]
        self.enter_room(None, self.current_room)

    def init_rooms(self):
        stairwell = Room('Treppenhaus',
                         'Das Treppenhaus. Nicht viel los hier. Aber hey, da steht eine T√ºr offen.'
                         'Aus dem B√ºro h√∂rt man leise Stimmen. Hinter dir f√§hrt der Aufzug wieder nach unten.'
                         )


        office = Room('B√ºro',
                      'Das B√ºro. In diesem B√ºro ist alles ziemlich dunkel. Viele Schreibtische gibt es hier'
                      'Vereinzelt sitzen Personen zusammen und besprechen Dinge. Einer trinkt Kaffee.'
                      )
        kitchen = Room('K√ºche',
                       'Die K√ºche. Hier duftet es nach frischem Kaffee. Ein gro√ües Tisch l√§dt zum Verweilen ein.'
                       )
        server_room = Room('Serverraum', 'Der Serverraum. Ganz sch√∂n viele Kabel liegen hier ...')

        emergancy_exit = Room ('Notausgang',
                               'Der Notausgang! Die Sonne scheint und die V√∂gel zwitschern.')

        task = ''

        escape_room = EscapeRoom ('Arbeitsplaz',
                                  'Das ist ein Arbeitsplatz. Hier knobeln die Mitarbeiter an Schwierigen aufgaben.',
                                  task)     # TODO: Is task really necessary?

        stairwell.set_exits({'norden': office, 's√ºden':emergancy_exit})
        office.set_exits({'s√ºden': stairwell, 'osten': kitchen, 'westen': server_room})
        kitchen.set_exits({'westen': office})
        server_room.set_exits({'osten': office, 's√ºden' : escape_room})
        emergancy_exit.set_exits({'norden':stairwell})

        office.set_persons({
            'robin': Person('Robin',
                            'üßê‚Äç‚Äç',
                            'Ich habe nach etwas gesucht, das mich jeden Tag etwas Neues herausfinden l√§sst.'
                            'Ein "Knobeln" auf Lebenszeit. üòÑ Als ich dann bei ein paar Freunden gesehen habe wie'
                            'viel Spa√ü sie beim Programmieren in der Schule hatten dachte ich mir, das k√∂nnte was'
                            'f√ºr mich sein und habe mich f√ºr das Studium beworben. Es hat geklappt. üòâ'
                            ),
            'julius': Person('Julius',
                             'üë®',
                             'Ich habe mich schon immer f√ºr Technik und Computer interessiert. Programmieren habe ich'
                             ' aber erst in einer AG in der 10. Klasse gelernt. Das hat mir von Anfang an unheimlich'
                             ' viel Spa√ü gemacht und mich seitdem nicht mehr losgelassen.'
                             ),
        })

        kitchen.set_persons({
            'ralf': Person('Ralf',
                           'ü§†',
                           'Mit 12 Jahren habe ich einen gebrauchten Rechner von meinem Bruder geschenkt bekommen'
                           'und so richtig fasziniert war ich dann sp√§ter vom C64, auf dem ich dann die ersten'
                           'Text-Adventures (wie dieses) geschrieben habe. Die M√∂glichkeiten "echte" Probleme,'
                           'wie die Tennisplanung meines Vaters schnell zu l√∂sen, haben mich motiviert mich in diesem'
                           'Thema weiter zu entwicklen.')
        })

        self.rooms = [stairwell, office, escape_room, server_room]

    def go_in_direction(self, direction=None):
        if not direction or direction not in self.current_room.exits:
            print('Ich kann da nicht hin gehen.')
            return
        self.enter_room(self.current_room, self.current_room.exits[direction])

    def enter_room(self, from_room, to_room):
        print('üö™ √ñffne T√ºr zu Raum', to_room.name)
        self.current_room = to_room
        self.current_room.show_description()
        if self.current_room == self.rooms[2]:
            self.rooms[2].escape_room_intro()
            print('üö™ Du bist Zur√ºck im Serverraum')
            self.current_room = from_room
            self.current_room.show_description()

    def look(self):
        self.current_room.show_content()

    def greet_person(self, name):
        self.current_room.greet_person(name)

    def ask_person(self, name):
        self.current_room.ask_person(name)
